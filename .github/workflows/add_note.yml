name: Agregar Nota

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Título de la Nota'
        required: true
        default: 'Nueva Nota'
      description:
        description: 'Descripción de la Nota'
        required: true
        default: 'Descripción aquí'
      image:
        description: 'URL de la Imagen'
        required: true
        default: 'http://example.com/image.jpg'
      concept:
        description: 'Concepto de la Nota'
        required: true
        default: 'Concepto aquí'
      author:
        description: 'Autor de la Nota'
        required: true
        default: 'Autor aquí'
      role:
        description: 'Rol del Autor'
        required: true
        default: 'Rol aquí'
      subtitle1:
        description: 'Subtítulo 1'
        required: true
        default: 'Subtítulo 1'
      paragraph1:
        description: 'Párrafo 1'
        required: true
        default: 'Párrafo 1 aquí'
      subtitle2:
        description: 'Subtítulo 2'
        required: true
        default: 'Subtítulo 2'
      paragraph2:
        description: 'Párrafo 2'
        required: true
        default: 'Párrafo 2 aquí'
      subtitle3:
        description: 'Subtítulo 3'
        required: true
        default: 'Subtítulo 3'
      paragraph3:
        description: 'Párrafo 3'
        required: true
        default: 'Párrafo 3 aquí'

jobs:
  add-note:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Add note to GitHub
        run: |
          import os
          import requests
          from base64 import b64encode
          from datetime import datetime

          # Recuperar el token desde los secretos de GitHub Actions
          GITHUB_TOKEN = os.getenv("NOTES_API")
          OWNER = "cambalachetechnologies"
          REPO = "web"
          FILE_PATH = "notas.json"

          # Recibir los inputs del workflow_dispatch
          note = {
              "title": "${{ github.event.inputs.title }}",
              "description": "${{ github.event.inputs.description }}",
              "image": "${{ github.event.inputs.image }}",
              "concept": "${{ github.event.inputs.concept }}",
              "author": "${{ github.event.inputs.author }}",
              "role": "${{ github.event.inputs.role }}",
              "date": datetime.now().isoformat(),
              "content": [
                  {
                      "subtitle": "${{ github.event.inputs.subtitle1 }}",
                      "paragraph": "${{ github.event.inputs.paragraph1 }}"
                  },
                  {
                      "subtitle": "${{ github.event.inputs.subtitle2 }}",
                      "paragraph": "${{ github.event.inputs.paragraph2 }}"
                  },
                  {
                      "subtitle": "${{ github.event.inputs.subtitle3 }}",
                      "paragraph": "${{ github.event.inputs.paragraph3 }}"
                  }
              ]
          }

          # Obtener el archivo actual en GitHub
          url = f"https://api.github.com/repos/{OWNER}/{REPO}/contents/{FILE_PATH}"
          headers = { "Authorization": f"token {GITHUB_TOKEN}" }
          response = requests.get(url, headers=headers)
          file_data = response.json()

          # Decodificar el contenido actual del archivo
          existing_content = []
          if 'content' in file_data:
              existing_content = b64decode(file_data['content']).decode('utf-8')
              existing_content = json.loads(existing_content)

          # Agregar la nueva nota
          existing_content.append(note)

          # Subir el archivo actualizado
          new_content = b64encode(json.dumps(existing_content, indent=2).encode('utf-8')).decode('utf-8')
          update_data = {
              "message": "Agregando nueva nota",
              "content": new_content,
              "sha": file_data['sha']
          }

          response = requests.put(url, headers=headers, json=update_data)

          if response.status_code == 200:
              print("Nota agregada con éxito!")
          else:
              print(f"Error al agregar la nota: {response.status_code}")
